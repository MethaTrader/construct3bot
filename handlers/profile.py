from aiogram import Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.utils.markdown import hbold, hcode

from database.methods import get_or_create_user, get_user_balance, get_user_purchases
from keyboards.keyboards import get_profile_keyboard, get_main_keyboard, get_balance_keyboard


async def cmd_profile(message: Message):
    """Handle /profile command"""
    # Get or create user
    user = await get_or_create_user(message.from_user.id, {
        'username': message.from_user.username,
        'first_name': message.from_user.first_name,
        'last_name': message.from_user.last_name
    })

    # Get the latest balance directly using the balance method
    balance = await get_user_balance(message.from_user.id)

    # Format profile message
    profile_text = (
        f"üë§ {hbold('–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å')}\n\n"
        f"–ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} {user.last_name or ''}\n"
        f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–ë–∞–ª–∞–Ω—Å: {hbold(f'{balance:.2f}')} –º–æ–Ω–µ—Ç\n"
        f"–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω: {user.created_at.strftime('%Y-%m-%d')}\n"
    )

    await message.answer(profile_text, reply_markup=get_profile_keyboard())


async def show_purchases(message: Message):
    """Show user's purchases"""
    # Get user purchases
    purchases = await get_user_purchases(message.from_user.id)

    if not purchases:
        await message.answer(
            "–í—ã –µ—â–µ –Ω–µ —Å–æ–≤–µ—Ä—à–∞–ª–∏ –ø–æ–∫—É–ø–æ–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥!",
            reply_markup=get_main_keyboard(message.from_user.id)
        )
        return

    # Format purchases message
    purchases_text = f"üõç {hbold('–í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏')}\n\n"

    for i, purchase in enumerate(purchases, 1):
        purchases_text += (
            f"{i}. {hbold(purchase['title'])}\n"
            f"   –¶–µ–Ω–∞: {hcode(f'{purchase['purchase_price']:.2f}')} –º–æ–Ω–µ—Ç\n"
            f"   –î–∞—Ç–∞: {purchase['purchase_date'].strftime('%Y-%m-%d %H:%M')}\n\n"
        )

    await message.answer(purchases_text, reply_markup=get_main_keyboard(message.from_user.id))


async def show_balance(message: Message):
    """Show user's balance"""
    # Get user balance
    balance = await get_user_balance(message.from_user.id)

    balance_text = (
        f"üí∞ {hbold('–í–∞—à –±–∞–ª–∞–Ω—Å')}\n\n"
        f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {hbold(f'{balance:.2f}')} –º–æ–Ω–µ—Ç\n\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –Ω–∞—à–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏–ª–∏ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –µ–≥–æ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –º–æ–Ω–µ—Ç."
    )

    # Make sure we're using the correct keyboard with the top-up button
    await message.answer(balance_text, reply_markup=get_balance_keyboard())


def register_profile_handlers(dp: Dispatcher):
    """Register profile handlers"""
    dp.message.register(cmd_profile, Command("profile"))
    dp.message.register(cmd_profile, F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
    dp.message.register(show_purchases, F.text == "üõç –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏")
    dp.message.register(show_balance, F.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
    dp.message.register(show_balance, Command("balance"))