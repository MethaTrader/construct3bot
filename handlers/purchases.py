from aiogram import Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.utils.markdown import hbold, hcode
from aiogram.fsm.context import FSMContext

from database.methods import create_purchase, get_product, get_user_balance
from keyboards.keyboards import get_purchase_confirmation_keyboard, get_main_keyboard


async def buy_product(callback: CallbackQuery, state: FSMContext):
    """Handle product purchase request"""
    # Extract product ID from callback data (buy_product:123)
    product_id = int(callback.data.split(':')[1])

    # Get product details
    product = await get_product(product_id)

    if not product or not product.available:
        await callback.answer("–≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", show_alert=True)
        return

    # Get user balance
    balance = await get_user_balance(callback.from_user.id)

    if balance < product.price:
        await callback.answer(
            "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.",
            show_alert=True
        )
        return

    # Store product info in state
    await state.update_data(product_id=product_id, product_price=product.price)

    # Show confirmation message
    confirmation_text = (
        f"üõí {hbold('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏')}\n\n"
        f"–¢–æ–≤–∞—Ä: {hbold(product.title)}\n"
        f"–¶–µ–Ω–∞: {hcode(f'{product.price:.2f}')} –º–æ–Ω–µ—Ç\n"
        f"–í–∞—à –±–∞–ª–∞–Ω—Å: {hcode(f'{balance:.2f}')} –º–æ–Ω–µ—Ç\n\n"
        f"–ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏: {hcode(f'{balance - product.price:.2f}')} –º–æ–Ω–µ—Ç\n\n"
        f"–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫—É?"
    )

    await callback.message.answer(
        confirmation_text,
        reply_markup=get_purchase_confirmation_keyboard(product_id)
    )
    await callback.answer()


async def confirm_purchase(callback: CallbackQuery, state: FSMContext):
    """Handle purchase confirmation"""
    # Extract product ID from callback data (confirm_purchase:123)
    product_id = int(callback.data.split(':')[1])

    # Get product details
    product = await get_product(product_id)

    if not product or not product.available:
        await callback.answer("–≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", show_alert=True)
        return

    # Process the purchase
    purchase = await create_purchase(
        callback.from_user.id,
        product_id,
        product.price
    )

    if not purchase:
        await callback.answer("–ü–æ–∫—É–ø–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å.", show_alert=True)
        return

    # Send success message
    success_text = (
        f"‚úÖ {hbold('–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞')}\n\n"
        f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ {hbold(product.title)}.\n\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –≤–∞—à—É –ø–æ–∫—É–ø–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ –ø–æ–∫—É–ø–∫–∏'."
    )

    # If the product has a file, send it
    if product.file_id:
        await callback.message.answer(success_text)

        # Send the file with a caption
        await callback.message.answer_document(
            document=product.file_id,
            caption=f"–í–æ—Ç –≤–∞—à–∞ –ø–æ–∫—É–ø–∫–∞: {product.title}"
        )
    else:
        await callback.message.answer(success_text, reply_markup=get_main_keyboard())

    await callback.answer("–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!")

    # Clear state
    await state.clear()


async def cancel_purchase(callback: CallbackQuery, state: FSMContext):
    """Handle purchase cancellation"""
    await callback.message.answer(
        "–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –° –≤–∞—Å –Ω–µ —Å–ø–∏—Å–∞–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞.",
        reply_markup=get_main_keyboard()
    )
    await callback.answer()

    # Clear state
    await state.clear()


def register_purchase_handlers(dp: Dispatcher):
    """Register purchase handlers"""
    dp.callback_query.register(buy_product, F.data.startswith("buy_product:"))
    dp.callback_query.register(confirm_purchase, F.data.startswith("confirm_purchase:"))
    dp.callback_query.register(cancel_purchase, F.data == "cancel_purchase")